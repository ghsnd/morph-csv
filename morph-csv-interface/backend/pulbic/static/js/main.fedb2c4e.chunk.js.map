{"version":3,"sources":["assets/logo.png","requests/api.js","components/Runmorph.js","components/Layout.js","components/SparqlResult.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ENDPOINT","runMorphCsv","formData","Promise","resolve","reject","axios","method","responseType","headers","data","url","then","resp","catch","err","runMorphRdb","Text","Typography","RunMorph","props","useState","isCsvwFile","setIsCsvwFile","isYarrrmlFile","setIsYarrrmlFile","isQueryFile","setIsQueryFile","queryFile","setQueryFile","csvwFile","setCsvwFile","yarrrmlFile","setYarrrmlFile","setRunMorphRdb","uploadFiles","values","yarrrmlLink","csvwLink","queryLink","FormData","append","undefined","parentCallback","name","onFinish","gutter","value","onChange","Item","label","className","type","e","target","files","length","htmlType","Layout","justify","lg","md","xs","children","SparqlResult","showModal","setState","visible","handleOk","console","log","handleCancel","state","level","dataSource","this","bordered","columns","head","React","Component","Title","Paragraph","loadingIcon","LoadingOutlined","style","fontSize","spin","Home","mrdbResult","setMrdbResult","isLoading","setIsLoading","showDownload","setShowDownload","mcsvResult","setMcsvResult","downloadResults","element","document","createElement","file","Blob","href","URL","createObjectURL","download","fileName","body","appendChild","click","submitForm","runMrdb","a","result","align","src","logo","span","indicator","Runmorph","Object","keys","onClick","DownloadOutlined","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fedb2c4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.45e5d598.png\";","import axios from 'axios'\nconst ENDPOINT = \"http://localhost:5000/runmorphcsv\"\n\nfunction runMorphCsv(formData){\n    return new Promise((resolve,reject) => {\n        axios({\n            method: 'post',\n            responseType: 'arraybuffer',\n            headers: {\n              'accept':'binary/octet-stream',\n              'Content-Type': 'multipart/form-data',\n              'Access-Control-Allow-Headers':'*'\n          },\n            data: formData,\n            url: ENDPOINT\n        })\n        .then((resp) => {\n            resolve(resp.data)\n        })\n        .catch((err) => reject(err));    \n    })\n}\nfunction runMorphRdb(formData){\n    return new Promise((resolve,reject) => {\n        axios({\n            method: 'post',\n            headers: {\n              'accept':'binary/octet-stream',\n              'Content-Type': 'multipart/form-data',\n              'Access-Control-Allow-Headers':'*'\n          },\n            data: formData,\n            url: ENDPOINT\n        })\n        .then((resp) => {\n            resolve(resp.data)\n        })\n        .catch((err) => reject(err));    \n    })\n}\n\n\nexport  {runMorphCsv,runMorphRdb} ","import React, {useState} from 'react'\nimport { Row,Col,Form, Input, Button, Switch, Typography, Divider} from 'antd';\n\nconst {Text} = Typography\n\n\n\nconst RunMorph = (props) => {\n    let [isCsvwFile, setIsCsvwFile] = useState(false);\n    let [isYarrrmlFile, setIsYarrrmlFile] = useState(false);\n    let [isQueryFile, setIsQueryFile] = useState(false);\n    let [queryFile, setQueryFile] = useState(null)\n    let [csvwFile, setCsvwFile] = useState(null)\n    let [yarrrmlFile, setYarrrmlFile] = useState(null)\n    let [uploaded, setUploaded] = useState(false)\n    let [uploading, setUploading] = useState(false)\n    let [runMorphRdb,setRunMorphRdb] = useState(false)\n    let [morphRdbData,setMorphRdbData] = useState({})\n    const onFinish = values => {\n    uploadFiles(values)\n  };\n  function callBack(data){\n    props.parentCallback(data,runMorphRdb)\n  }\n  const uploadFiles = (values) => {\n    values.yarrrmlLink = \"https://raw.githubusercontent.com/oeg-upm/morph-csv/evaluation/swj2020-si-webofdata/resources/gtfs/gtfs-csv.yaml\"\n    values.csvwLink = \"https://raw.githubusercontent.com/oeg-upm/morph-csv/evaluation/swj2020-si-webofdata/resources/gtfs/gtfs.csvw.json\"   \n    values.queryLink = \"https://raw.githubusercontent.com/oeg-upm/morph-csv/evaluation/swj2020-si-webofdata/resources/gtfs/queries/original/q1.rq\" \n    const formData = new FormData();\n    if(isCsvwFile){\n      formData.append(\"csvwFile\", csvwFile)\n    }else{\n      formData.append(\"csvwLink\", values.csvwLink)\n    }\n    if(isYarrrmlFile){\n      formData.append(\"yarrrmlFile\", yarrrmlFile)\n    }else{\n      formData.append(\"yarrrmlLink\", values.yarrrmlLink)\n\n    }\n    if(isQueryFile){\n      formData.append(\"queryFile\", queryFile)\n    }else if (values.queryLink !== undefined){\n      formData.append(\"queryLink\", values.queryLink)\n    }        \n    callBack(formData)\n  }\n\n  return (\n    <>\n    <Form\n      name=\"basic\"\n      onFinish={onFinish}\n    >\n        <Row gutter={[16,16]}>\n            <Col>\n                <Text>Do you prefer upload a CSVW file?</Text> \n            </Col>\n            <Col>\n                <Switch value={isCsvwFile} onChange={() => {setIsCsvwFile(!isCsvwFile)}} />            \n            </Col>\n        </Row>\n        {\n            !isCsvwFile?(\n                <Form.Item\n                label=\"CSVW Url\"\n                name=\"csvwLink\"\n              >\n                <Input value=\"https://raw.githubusercontent.com/oeg-upm/morph-csv/evaluation/swj2020-si-webofdata/resources/gtfs/gtfs.csvw.json\"/>\n              </Form.Item>\n            ):(\n              <Form.Item label={(csvwFile)\n                ? `File ${csvwFile.name} selected`\n                : ' Choose  File'\n            }>\n              <label className=\"custom-file-upload\">\n              <Input\n                    className=\"file-input\"\n                    type=\"file\" name=\"file\"\n                    onChange={(e) => {\n                        if (e.target.files && e.target.files.length > 0) {\n                            setCsvwFile(e.target.files[0], );\n                        }\n                    }} />                    \n              </label>\n            </Form.Item>\n            )\n        }\n\n<Row gutter={[16,16]}>\n            <Col>\n                <Text>Do you prefer upload a YARRRML+FnO file?</Text> \n            </Col>\n            <Col>\n                <Switch value={isYarrrmlFile} onChange={() => {setIsYarrrmlFile(!isYarrrmlFile)}} />            \n            </Col>\n</Row>\n\n{\n            !isYarrrmlFile?(\n                <Form.Item\n                label=\"YARRRML+FnO Url\"\n                name=\"yarrrmlLink\"\n                value=\"\"\n              >\n                <Input />\n              </Form.Item>\n            ):(\n              <Form.Item label={(yarrrmlFile)\n                ? `File ${yarrrmlFile.name} selected`\n                : ' Choose File'\n            }>\n              <label className=\"custom-file-upload\">\n              <Input\n                    className=\"file-input\"\n                    type=\"file\" name=\"file\"\n                    onChange={(e) => {\n                        if (e.target.files && e.target.files.length > 0) {\n                            setYarrrmlFile(e.target.files[0], );\n                        }\n                    }} />                    \n              </label>\n            </Form.Item>\n            )\n        }\n        <Row gutter={[16,16]}>\n            <Col>\n                <Text>Do you prefer upload a Query file?</Text> \n            </Col>\n            <Col>\n                <Switch value={isQueryFile} onChange={() => {setIsQueryFile(!isQueryFile)}} />            \n            </Col>\n        </Row>\n{\n            !isQueryFile?(\n                <Form.Item\n                label=\"Query Url\"\n                name=\"queryLink\"\n              >\n                <Input />\n              </Form.Item>\n            ):(\n              <Form.Item label={(queryFile)\n                ? `File ${queryFile.name} selected`\n                : ' Choose  File'\n            }>\n              <label className=\"custom-file-upload\">\n              <Input\n                    className=\"file-input\"\n                    type=\"file\" name=\"file\"\n                    onChange={(e) => {\n                        if (e.target.files && e.target.files.length > 0) {\n                            setQueryFile(e.target.files[0], );\n                        }\n                    }} />                    \n              </label>\n            </Form.Item>\n            )\n        }    \n        <Row gutter={[16,16]}>\n          <Col>\n          <Text>Run Morph-RDB?</Text>\n          </Col>\n          <Col>\n          <Switch onChange={() => {setRunMorphRdb(!runMorphRdb);}} />            \n          </Col>\n          <Col>\n            <Text type=\"secondary\"> This will return a table with the sparql result</Text>\n          </Col>\n        </Row>\n      <Form.Item >\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n    <Divider></Divider>\n    </>\n  );\n};\nexport default RunMorph","import React from 'react'\nimport {Row, Col} from 'antd'\n\nexport default function Layout(props){\n    return(\n        <Row\n        justify=\"center\"\n        >\n            <Col\n                lg={12}\n                md={20}\n                xs={22}\n            >\n                {props.children}\n            </Col>\n        </Row>\n    )\n}","import React from 'react'\nimport { Modal, Button,Table } from 'antd';\nimport Title from 'antd/lib/skeleton/Title';\n\nexport default class SparqlResult extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { visible: true };\n\n    }\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <>\n      <Title level={3} >Sparql Result:</Title>\n        <Table dataSource={this.props.data} bordered columns={this.props.head}></Table>\n      </>\n    );\n  }\n}","import React, { useState } from 'react'\nimport { DownloadOutlined ,UploadOutlined, LoadingOutlined } from '@ant-design/icons';\nimport {Row,Col, Table,Typography, Spin, Button} from 'antd'\nimport  {runMorphCsv,runMorphRdb} from '../requests/api'\nimport Runmorph from '../components/Runmorph.js'\nimport Layout from '../components/Layout'\nimport logo from '../assets/logo.png'\nimport SparqlResult from '../components/SparqlResult'\nconst {Title,Paragraph} = Typography\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 48 }} spin />;\n\nexport default function Home(){\n    let [mrdbResult, setMrdbResult] = useState({})\n    let [isLoading, setIsLoading] = useState(false)\n    let [showDownload, setShowDownload] = useState(false)\n    let [mcsvResult, setMcsvResult] = useState(null)\n\n    const downloadResults = (data) => {\n        const element = document.createElement(\"a\");\n        const file = new Blob([data], {type: 'application/zip'});\n        element.href = URL.createObjectURL(file);\n        let fileFormat = \".zip\"\n        let fileName = \"results\"\n        element.download = fileName + fileFormat;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();    \n      }     \n    const submitForm = async (data, runMrdb) => {\n        let result = null;\n        setMcsvResult(null)\n        setMrdbResult({})\n        setIsLoading(true)\n        if(runMrdb){\n            data.append('runMorphRdb',runMrdb)\n            result = await runMorphRdb(data) \n            console.log(result)\n            setMrdbResult(result)\n        }else{\n            result = await runMorphCsv(data)\n            downloadResults(data)\n            setMcsvResult(result)\n            setShowDownload(true)\n        }\n        setIsLoading(false)\n\n\n    }\n   \n    return(\n       <Layout>\n           <Row justify=\"space-between\" gutter={[16,16]} align=\"middle\">   \n           <Col>\n                <img src={logo}  className=\"imgFluid\"/>\n            </Col>\n           </Row>\n           <Row gutter={[16,16]}>\n               <Col span={15}>\n               <Title level={3}>Morph-CSV Interface</Title>\n               <Paragraph className=\"textJustify\" >\n                    Morph-CSV is an open source tool for querying tabular data sources using SPARQL. It exploits the information from the query, RML+FnO mappings and CSVW metadata to enhance the performance and completeness of traditional OBDA systems (SPARQL-to-SQL translators).\n                </Paragraph>\n               </Col>\n           </Row>   \n\n           {isLoading ? (\n                <Spin indicator={loadingIcon}></Spin>\n            ):(\n                <Runmorph parentCallback={submitForm} />   \n           )}\n           {\n           Object.keys(mrdbResult).length > 0 ? (\n                <SparqlResult data={mrdbResult['data']} head={mrdbResult['head']}></SparqlResult>\n           ):showDownload?(\n               <Button onClick={() => downloadResults(mcsvResult)}> Download Morph-CSV result <DownloadOutlined /> </Button>\n            ):null\n            }\n\n       </Layout>\n    )\n}","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport {Route, Switch,BrowserRouter} from 'react-router-dom'\nimport Home from './pages/Home';\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Switch>\n    <Route path=\"/\" component={Home}/>  \n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}