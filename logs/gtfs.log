
QUERY: 1
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'shapes': {'source': 'SHAPES.csv', 'columns': ['shape_pt_lat', 'shape_pt_lon', 'shape_id', 'shape_pt_sequence']}}
Table: SHAPES.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "shapes";
CREATE TABLE shapes(shape_id VARCHAR(500),shape_pt_lat DECIMAL(40,15),shape_pt_lon DECIMAL(40,15),shape_pt_sequence INT);

Answering query
----------------------------------------------
QUERY: 2
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stops': {'source': 'STOPS.csv', 'columns': ['stop_desc', 'stop_lat', 'wheelchair_boarding', 'stop_lon', 'stop_id']}}
Table: STOPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_desc VARCHAR(500),stop_lat DECIMAL(40,15),stop_lon DECIMAL(40,15),wheelchair_boarding INT);

Answering query
----------------------------------------------
QUERY: 3
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stops': {'source': 'STOPS.csv', 'columns': ['wheelchair_boarding', 'location_type', 'stop_lon', 'stop_desc', 'stop_lat', 'stop_id']}}
Table: STOPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_desc VARCHAR(500),stop_lat DECIMAL(40,15),stop_lon DECIMAL(40,15),location_type INT,wheelchair_boarding INT);

Answering query
----------------------------------------------
QUERY: 4
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'routes': {'source': 'ROUTES.csv', 'columns': ['route_long_name', 'route_id', 'route_desc', 'agency_id', 'route_short_name']}, 'agency': {'source': 'AGENCY.csv', 'columns': ['agency_url', 'agency_id', 'agency_name', 'agency_phone']}}
Table: AGENCY.csv
Table: ROUTES.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "agency";
CREATE TABLE agency(agency_id VARCHAR(500),agency_name VARCHAR(500),agency_url VARCHAR(500),agency_phone VARCHAR(500),PRIMARY KEY (agency_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),agency_id VARCHAR(500),route_short_name VARCHAR(500),route_long_name VARCHAR(500),route_desc VARCHAR(500),PRIMARY KEY (route_id));

Answering query
----------------------------------------------
QUERY: 5
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'calendar_date_rules': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id', 'exception_type', 'date']}, 'calendar_rules': {'source': 'CALENDAR.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),date DATE,exception_type BOOLEAN,PRIMARY KEY (service_id,date));

Answering query
----------------------------------------------
QUERY: 6
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'routes': {'source': 'ROUTES.csv', 'columns': ['route_id', 'agency_id']}, 'agency': {'source': 'AGENCY.csv', 'columns': ['agency_id']}}
Table: AGENCY.csv
Table: ROUTES.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "agency";
CREATE TABLE agency(agency_id VARCHAR(500),PRIMARY KEY (agency_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),agency_id VARCHAR(500),PRIMARY KEY (route_id));

Answering query
----------------------------------------------
QUERY: 7
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stoptimes': {'source': 'STOP_TIMES.csv', 'columns': ['arrival_time', 'trip_id', 'stop_id']}, 'trips': {'source': 'TRIPS.csv', 'columns': ['route_id', 'service_id', 'trip_id', 'trip_short_name']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_desc', 'route_short_name', 'route_id']}, 'stops': {'source': 'STOPS.csv', 'columns': ['stop_id', 'stop_desc', 'stop_lat', 'wheelchair_boarding', 'stop_lon']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: ROUTES.csv
Table: STOP_TIMES.csv
Table: STOPS.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),route_short_name VARCHAR(500),route_desc VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "stop_times";
CREATE TABLE stop_times(trip_id VARCHAR(500),arrival_time VARCHAR(500),stop_id VARCHAR(500),PRIMARY KEY (trip_id,arrival_time,stop_id));
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_desc VARCHAR(500),stop_lat DECIMAL(40,15),stop_lon DECIMAL(40,15),wheelchair_boarding INT,PRIMARY KEY (stop_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),service_id VARCHAR(500),trip_id VARCHAR(500),trip_short_name VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 8
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stoptimes': {'source': 'STOP_TIMES.csv', 'columns': ['stop_id', 'arrival_time', 'trip_id']}, 'trips': {'source': 'TRIPS.csv', 'columns': ['trip_short_name', 'route_id', 'service_id', 'trip_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_short_name', 'route_desc', 'route_id']}, 'stops': {'source': 'STOPS.csv', 'columns': ['stop_id', 'stop_desc']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'calendar_rules': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'calendar_date_rules': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: ROUTES.csv
Table: STOP_TIMES.csv
Table: STOPS.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),route_short_name VARCHAR(500),route_desc VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "stop_times";
CREATE TABLE stop_times(trip_id VARCHAR(500),arrival_time VARCHAR(500),stop_id VARCHAR(500),PRIMARY KEY (stop_id,arrival_time,trip_id));
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_desc VARCHAR(500),PRIMARY KEY (stop_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),service_id VARCHAR(500),trip_id VARCHAR(500),trip_short_name VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 9
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'trips': {'source': 'TRIPS.csv', 'columns': ['trip_short_name', 'shape_id', 'route_id', 'service_id', 'trip_id']}, 'shapes': {'source': 'SHAPES.csv', 'columns': ['shape_id', 'shape_pt_lat', 'shape_pt_sequence']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: ROUTES.csv
Table: SHAPES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "shapes";
CREATE TABLE shapes(shape_id VARCHAR(500),shape_pt_lat DECIMAL(40,15),shape_pt_sequence INT,PRIMARY KEY (shape_id,shape_pt_sequence));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),service_id VARCHAR(500),trip_id VARCHAR(500),trip_short_name VARCHAR(500),shape_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 10
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stoptimes': {'source': 'STOP_TIMES.csv', 'columns': ['arrival_time', 'departure_time', 'stop_id', 'trip_id']}, 'trips': {'source': 'TRIPS.csv', 'columns': ['trip_id']}}
Table: STOP_TIMES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "stop_times";
CREATE TABLE stop_times(trip_id VARCHAR(500),arrival_time VARCHAR(500),departure_time VARCHAR(500),stop_id VARCHAR(500),PRIMARY KEY (arrival_time,trip_id,stop_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 11
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'trips': {'source': 'TRIPS.csv', 'columns': ['trip_id', 'service_id']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'calendar_rules': {'source': 'CALENDAR.csv', 'columns': ['end_date', 'service_id', 'start_date']}, 'calendar_date_rules': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),start_date DATE,end_date DATE,PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(service_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 12
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stoptimes': {'source': 'STOP_TIMES.csv', 'columns': ['stop_id', 'arrival_time', 'trip_id']}, 'trips': {'source': 'TRIPS.csv', 'columns': ['route_id', 'trip_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_id', 'route_long_name']}, 'stops': {'source': 'STOPS.csv', 'columns': ['stop_id', 'stop_name', 'wheelchair_boarding']}}
Table: ROUTES.csv
Table: STOP_TIMES.csv
Table: STOPS.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),route_long_name VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "stop_times";
CREATE TABLE stop_times(trip_id VARCHAR(500),arrival_time VARCHAR(500),stop_id VARCHAR(500),PRIMARY KEY (stop_id,arrival_time,trip_id));
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_name VARCHAR(500),wheelchair_boarding INT,PRIMARY KEY (stop_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 13
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stops': {'source': 'STOPS.csv', 'columns': ['stop_id', 'stop_name', 'location_type', 'parent_station']}}
Table: STOPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_name VARCHAR(500),location_type INT,parent_station VARCHAR(500),PRIMARY KEY (stop_id));

Answering query
----------------------------------------------
QUERY: 14
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stoptimes': {'source': 'STOP_TIMES.csv', 'columns': ['trip_id', 'stop_sequence', 'stop_id', 'arrival_time']}, 'trips': {'source': 'TRIPS.csv', 'columns': ['trip_id', 'route_id']}, 'stops': {'source': 'STOPS.csv', 'columns': ['stop_name', 'stop_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_id']}}
Table: ROUTES.csv
Table: STOP_TIMES.csv
Table: STOPS.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "stop_times";
CREATE TABLE stop_times(trip_id VARCHAR(500),arrival_time VARCHAR(500),stop_id VARCHAR(500),stop_sequence INT,PRIMARY KEY (trip_id,stop_id,arrival_time));
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_name VARCHAR(500),PRIMARY KEY (stop_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 15
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'stops': {'source': 'STOPS.csv', 'columns': ['zone_id', 'stop_timezone', 'stop_desc', 'stop_code', 'parent_station', 'stop_id', 'stop_lat', 'stop_lon', 'stop_name', 'stop_url', 'wheelchair_boarding', 'location_type']}}
Table: STOPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "stops";
CREATE TABLE stops(stop_id VARCHAR(500),stop_code VARCHAR(500),stop_name VARCHAR(500),stop_desc VARCHAR(500),stop_lat DECIMAL(40,15),stop_lon DECIMAL(40,15),zone_id VARCHAR(500),stop_url VARCHAR(500),location_type INT,parent_station VARCHAR(500),stop_timezone VARCHAR(500),wheelchair_boarding INT,PRIMARY KEY (stop_id));

Answering query
----------------------------------------------
QUERY: 16
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'trips': {'source': 'TRIPS.csv', 'columns': ['service_id', 'trip_id', 'route_id']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'calendar_date_rules': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id', 'date', 'exception_type']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_id']}, 'calendar_rules': {'source': 'CALENDAR.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: ROUTES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),date DATE,exception_type BOOLEAN,PRIMARY KEY (service_id,date));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),service_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 17
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'trips': {'source': 'TRIPS.csv', 'columns': ['trip_id', 'route_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_short_name', 'route_type', 'route_id']}, 'frequencies': {'source': 'FREQUENCIES.csv', 'columns': ['end_time', 'trip_id', 'start_time']}}
Table: FREQUENCIES.csv
Table: ROUTES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "frequencies";
CREATE TABLE frequencies(trip_id VARCHAR(500),start_time VARCHAR(500),end_time VARCHAR(500),PRIMARY KEY (trip_id,start_time));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),route_short_name VARCHAR(500),route_type INT,PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
QUERY: 18
Downloading mappings, data and query
Query Parsed
Removing FnO functions from RML
Selecting RML rules, CSVW annotations and CSV files and columns for answering the query
Required Columns: {'trips': {'source': 'TRIPS.csv', 'columns': ['route_id', 'service_id', 'trip_id']}, 'routes': {'source': 'ROUTES.csv', 'columns': ['route_long_name', 'route_id', 'route_short_name']}, 'services1': {'source': 'CALENDAR.csv', 'columns': ['service_id']}, 'services2': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}, 'calendar_rules': {'source': 'CALENDAR.csv', 'columns': ['sunday', 'service_id']}, 'calendar_date_rules': {'source': 'CALENDAR_DATES.csv', 'columns': ['service_id']}}
Table: CALENDAR.csv
Table: CALENDAR_DATES.csv
Table: ROUTES.csv
Table: TRIPS.csv
Formalizing the data to 2NF
Preparing the data to execute the query
Tanslating the RML mapping without functions to R2RML
Generating the SQL schema based on the csvw and the query
DROP TABLE IF EXISTS "calendar";
CREATE TABLE calendar(service_id VARCHAR(500),sunday BOOLEAN,PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "calendar_dates";
CREATE TABLE calendar_dates(service_id VARCHAR(500),PRIMARY KEY (service_id));
DROP TABLE IF EXISTS "routes";
CREATE TABLE routes(route_id VARCHAR(500),route_short_name VARCHAR(500),route_long_name VARCHAR(500),PRIMARY KEY (route_id));
DROP TABLE IF EXISTS "trips";
CREATE TABLE trips(route_id VARCHAR(500),service_id VARCHAR(500),trip_id VARCHAR(500),PRIMARY KEY (trip_id));

Answering query
----------------------------------------------
